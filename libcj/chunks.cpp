#include "chunks.h"

namespace cj {

jit_chunk_t chunk_table[] = {
  { ins_const   , 6 ,  1, -1, "\xb8\xdd\xcc\xbb\xaa\x50" },
  { ins_getl    , 7 ,  2, -1, "\x8b\x85\xdd\xcc\xbb\xaa\x50" },
  { ins_setl    , 7 ,  3, -1, "\x58\x89\x85\xdd\xcc\xbb\xaa" },
  { ins_add     , 4 , -1, -1, "\x58\x01\x04\x24" },
  { ins_sub     , 4 , -1, -1, "\x58\x29\x04\x24" },
  { ins_mul     , 7 , -1, -1, "\x58\xf7\x24\x24\x89\x04\x24" },
  { ins_div     , 7 , -1, -1, "\x58\xf7\x34\x24\x89\x04\x24" },
  { ins_lt      , 11, -1, -1, "\x58\x5a\x39\xc2\x0f\x9c\xc0\x83\xe0\x01\x50" },
  { ins_lte     , 11, -1, -1, "\x58\x5a\x39\xc2\x0f\x9e\xc0\x83\xe0\x01\x50" },
  { ins_gt      , 11, -1, -1, "\x58\x5a\x39\xc2\x0f\x9f\xc0\x83\xe0\x01\x50" },
  { ins_gte     , 11, -1, -1, "\x58\x5a\x39\xc2\x0f\x9d\xc0\x83\xe0\x01\x50" },
  { ins_eq      , 11, -1, -1, "\x58\x5a\x39\xc2\x0f\x94\xc0\x83\xe0\x01\x50" },
  { ins_neq     , 11, -1, -1, "\x58\x5a\x39\xc2\x0f\x95\xc0\x83\xe0\x01\x50" },
  { ins_and     , 5 , -1, -1, "\x58\x5a\x21\xd0\x50" },
  { ins_or      , 5 , -1, -1, "\x58\x5a\x09\xd0\x50" },
  { ins_notl    , 5 , -1, -1, "\x58\x83\xf0\x01\x50" },
  { ins_dup     , 4 , -1, -1, "\x8b\x04\x24\x50" },
  { ins_drop    , 6 ,  2, -1, "\x81\xc4\xdd\xcc\xbb\xaa" },
  { ins_sink    , 8 ,  3, -1, "\x58\x81\xc4\xdd\xcc\xbb\xaa\x50" },
  { ins_frame   , 9 ,  5, -1, "\x55\x89\xe5\x81\xec\xdd\xcc\xbb\xaa" },
  { ins_ret     , 9 ,  4, -1, "\x58\x5d\x81\xc4\xdd\xcc\xbb\xaa\xc3" },
  { ins_call    , 6 , -1,  1, "\xe8\x39\xcc\xbb\xaa\x50" },
  { ins_jnz     , 10, -1,  6, "\x58\x83\xf8\x00\x0f\x85\x2e\xcc\xbb\xaa" },
  { ins_jz      , 10, -1,  6, "\x58\x83\xf8\x00\x0f\x84\x24\xcc\xbb\xaa" },
  { ins_jmp     , 5 , -1,  1, "\xe9\x1f\xcc\xbb\xaa" },
};

}  // namespace cj
